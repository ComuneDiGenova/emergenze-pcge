version: '3.8'

networks:
  default:
    ipam:
      driver: default
      config:
        - subnet: "172.27.0.0/24"
        # - subnet: "192.168.189.0/24"

services:

  botgram_emergenze:
    container_name: emergenze-bot
    build:
      context: .
      dockerfile: ./docker/emergenze/Dockerfile
      args:
        - UNAME=${ENVUSER}
        - UID=${UID}
        - GID=${GID}
    environment:
      EMERGENZE_BOT_TOKEN: ${EMERGENZE_BOT_TOKEN}
    restart: unless-stopped
    stdin_open: true
    tty: true
    volumes:
      - ./bots:/home/${ENVUSER}/bots:w

  botgram_convocazione_coc:
    container_name: convocazione_coc-bot
    build:
      context: .
      dockerfile: ./docker/convocazione_coc/Dockerfile
      args:
        - UNAME=${ENVUSER}
        - UID=${UID}
        - GID=${GID}
    environment:
      ENVUSER: ${ENVUSER}
      EMERGENZE_COC_BOT_TOKEN: ${EMERGENZE_COC_BOT_TOKEN}
    restart: unless-stopped
    stdin_open: true
    tty: true
    volumes:
      - ./bots:/home/${ENVUSER}/bots:w
      - ./logs:/home/${ENVUSER}/log

  postgresql:
      image: postgis/postgis:9.6-2.5-alpine
      volumes:
        - ./postgis-data:/var/lib/postgresql
      environment:
        # If you need to create multiple database you can add coma separated databases eg gis,data
        - POSTGRES_DB=gis
        - POSTGRES_USER=docker
        - POSTGRES_PASSWORD=docker
        - ALLOW_IP_RANGE=0.0.0.0/0
        # Add extensions you need to be enabled by default in the DB. Default are the five specified below
        - POSTGRES_MULTIPLE_EXTENSIONS=postgis,hstore,postgis_topology,postgis_raster,pgrouting
        - RUN_AS_ROOT=true
      ports:
        - "5432:5432"
      restart: on-failure
      healthcheck:
        test: "PGPASSWORD=docker pg_isready -h 127.0.0.1 -U docker -d gis"
